// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}





model Numbers {

// Number

  id Int @id @default(autoincrement())
  col1 Int @db.UnsignedInt 

  col2 BigInt 
  col3 BigInt @db.UnsignedBigInt

  col4 Int @db.SmallInt
  col5 Int @db.UnsignedSmallInt

  col6 Int @db.MediumInt
  col7 Int @db.UnsignedMediumInt

  col8 Int @db.TinyInt
  col9 Int @db.UnsignedTinyInt

  col10 Decimal

  col11 Float
  col12 Float @db.Float

  col13 BigInt @default(100)
  col14 BigInt @unique

}


model Strings {

  // string
  
 id Int @id @default(autoincrement())
  col15 String
  col16 String?
  col17 String @default("Soto vai vai")
  col18 String @db.VarChar(700)
  col19 String @db.Text
  col20 String @db.TinyText
  col21 String @db.LongText
}


enum UserTypes {
  New 
  Exixting
  VIP
  Regular 
  Bad
}

model Users {
  id Int @id @default(autoincrement())
  remarks UserTypes // Enum Wqu --> New/ Existing / VIP / Regular / bad
}


model TimeTracker {
  id Int @id @default(autoincrement())
  col1 DateTime
  col2 DateTime @db.Date
  col3 DateTime @db.Time
  col4 DateTime @db.Timestamp()
  col5 DateTime @db.DateTime()
  
}

model HaNa {
    id Int @id @default(autoincrement())
    col1 Boolean
    col2 String @db.Char(100) @default("Habibar iccha")

}

model BinaryObjectModel {
  id Int @id @default(autoincrement())
  col1 Bytes @db.Blob
  col2 Bytes @db.TinyBlob
  col3 Bytes @db.VarBinary(40)
  col5 Bytes @db.VarBinary(100)
}


model user {
  id Int @id @default(autoincrement())
  email String @unique
  password String
  profile profile?

  post post[]
  comment comment[]
}

model profile {
  id Int @id @default(autoincrement())
  firstName String
  lastName String
  city String
  postCode String

  userId Int @unique
  user user @relation(fields: [userId], references: [id], onDelete: Restrict, onUpdate: Cascade)

}

model post {
  id Int @id @default(autoincrement())
  title String
  description String
  userId Int
  user user @relation(fields: [userId], references: [id], onDelete: Restrict, onUpdate: Cascade)

  comment comment[]
}

model comment {
    id Int @id @default(autoincrement())
    des String
    userId Int
    user user @relation(fields: [userId], references: [id], onDelete: Restrict, onUpdate: Cascade)

    postId Int
    post post @relation(fields: [postId], references: [id], onDelete: Restrict, onUpdate: Cascade)
}


model employee {
    id Int @id @default(autoincrement())
    name String
    designation String
    city String
    salary Int
}